# File m80memtp.asm
0000			; M80MEMTP 
0000			;   David Allday - 24 January 2021 
0000			;        version 3 
0000			; 
0000			; Memory test program for the Nascom MAP80 256k memory card 
0000			;  It is designed to test the paging options provided by the MAP80 256k card. 
0000			;    but can be used to test nonpaged memory by setting Numberof64kpages to 0. 
0000			;  
0000			;   I got a bit confused as the Pages the manual seem to talk about is rows 0 to 3 whereas 
0000			;   the circuit diagram talks about rows 1 to 4  
0000			;   I believe page 0 is row 1. 
0000			;   
0000			;  Since we are talking about a NASSYS program the memory from 0000H to 07FFH  
0000			;     will always be used by the monitor, working ram and video ram. 
0000			;     So testing between 0000H and 07FFH will not be very useful  
0000			;     ( unless page count set to 0 and you avoid the ram used by NASSYS and this program ) 
0000			; 
0000			;  The progam will always be in memory 0C80H no matter what paging it does. 
0000			; 
0000			;  if start address is between 1000H and 7FFFH and the end address is 8000H or below then 
0000			;        it will test each 32k page using the lower 32k of memory. 
0000			; 
0000			;  if start address is between 8000H and FFFFH and the end address is 0000H or  > 8000H and <= FFFFH then 
0000			;        it will test each 32k page using the upper 32k of memory. 
0000			; 
0000			;  if start address is between 1000H and 7FFFH and the end address is above 8000H then 
0000			;        it will test each 64k page of memory. 
0000			; 
0000			;  The standard 256k memory card has 8 pages of 32k 
0000			;    so will check pages 0 to 7  
0000			;  The standard 256k memory card has 4 pages of 64k 
0000			;    so will check pages 0 to 3 
0000			;  
0000			;  The program calculates the number of test blocks it needs to do depending upon the type of test being done. 
0000			;     So for 64k tests the number of blocks will be the number of 64k pages. 
0000			;     For 32k tests the number of blocks will be twice the number of 64k pages. 
0000			; 
0000			;  If you have more than 1 card or have upgraded it to a 1Mbyte card then 
0000			;   you can specify the number of 64k pages to test from 1 to 010H ( 16 64k pages ) 
0000			; 
0000			;  Use this at your own risk, I think it works but no guarantees. 
0000			;  If you want to use or amend this program please feel free. 
0000			;   It would be nice if you mentioned me and let me know how it goes 
0000			;            david_nascom@davjanbec.co.uk 
0000			;    
0000			; NOTE1:- The opcode test uses NMI so be careful trying to single step this code. 
0000			; NOTE2:- The program is written for the NASSYS3 so you cannot test memory locations 000H to 07FFH 
0000			; 
0000			;***************** CALLING THE PROGRAM 
0000			; 
0000			; Call the program using  
0000			;  EC80 [startaddress [endaddress [Numberof64kpages] ] ] 
0000			;      these values are stored in the program  
0000			;        so a call to EC80 will use the same values as the last call 
0000			;   startaddress	The testing starts at this address 
0000			;   endaddress		The testing finished at this address -1 
0000			;   Numberof64kpages	The number of 64k memory pages to be tested. 
0000			;			0 - special case and NO paging is activated. 
0000			;			4 - standard M80 256k card fully populated 
0000			;			10 - (16 dec) if you have 4 cards or moded the card to provide 1Mbyte. 
0000			;  e.g. 
0000			;      EC80 8000 9000 2 
0000			;        will test memory from 8000 to 8FFF for 4 32k pages  
0000			;                Port EF set to 80, 81, 82, 83 for the tests 
0000			; 
0000			;      EC80 1000 0000 2 
0000			;        will test memory from 1000 to FFFF for 2 64k pages  
0000			;                Port EF set to 00, 01 for the tests 
0000			; 
0000			;      EC80 1000 0000 0 
0000			;        will test memory from 1000 to FFFF without paging.  
0000			;                Port EF is not change for this test. 
0000			; 
0000			;         Only the low byte is used from lastpage parameter. 
0000			;         The end address tested is actually -1 of the endaddress value. 
0000			; 
0000			; *************** OUTPUT MESSAGES  
0000			; 
0000			;   The program will output a message on the top line. 
0000			; 
0000			;   e.g. in the default call to C80 
0000			;      MAP80 MEMTST V3 S:8000 E:FFFF 32KU pg:00L 8888 
0000			;      where 
0000			;        V3     is the version of the program 
0000			;        S:8000 is the first address to be tested 
0000			;        E:FFFF is the last address to be tested 
0000			;        32KU   means it is using 32k paging mode using the upper 32k of memory 
0000			;               This can be  
0000			;                   32KL meaning it is using 32k paging mode using the lower 32k of memory 
0000			;                   64K  meaning it is using 64k paging mode 
0000			;        pg:00L shows the 32k page being tested either Lower or Upper 
0000			;        8888   is the current byte being tested 
0000			; 
0000			;   A similar message is displayed on the main screen 
0000			; 
0000			;   S:8000 E:FFFF 08 32KU pages 
0000			;      where 
0000			;        S:8000 is the first address to be tested 
0000			;        E:FFFF is the last address to be tested 
0000			;        08     is the number of pages to be tested 
0000			;        32KU   means it is using 32k paging mode using the upper 32k of memory 
0000			;                This can be   
0000			;                   32KL meaning it is using 32k paging mode using the lower 32k of memory 
0000			;                   64K  meaning it is using 64k paging mode 
0000			; 
0000			;  It then outputs a messafe for each bank as it is zeroised.   
0000			;        Zero:8000 - FFFF pg:00L 
0000			;        Zero:8000 - FFFF pg:00U 
0000			;        Zero:8000 - FFFF pg:01L  
0000			;        etc . . . .  
0000			; 
0000			;  It then outputs a message for each bank as it is tested 
0000			;        TEST:8000 - FFFF pg:00L 
0000			;        TEST:8000 - FFFF pg:00U 
0000			;        TEST:8000 - FFFF pg:01L  
0000			;        etc . . . .  
0000			;    and the current address will be displayed in the right hand side of the top line. 
0000			;      
0000			;  The outputs messages will be slightly different for 64k mode and the non-paging mode 
0000			;  
0000			;  Any errors encounted will be reported - see RESULTS section below. 
0000			; 
0000			; ***************   STOPPING THE PROGRAM  
0000			; 
0000			; The program monitors the keyboard during the test and any key will interrupt it. 
0000			;   This will undo the effect of the C button on the "press SP, C or Q" input. 
0000			;   NOTE:- it only checks the keys at the end of each page in the initial setting to zero  
0000			;             to avoid slowing down that part of the processing. 
0000			;     
0000			; When the program says "press SP, C or Q" 
0000			;   after 10 error lines or at end of each cycle 
0000			;   	You can press space to continue 
0000			;   	press C to continue without stopping for any errors 
0000			;   	press Q or anything else to return to NAS-SYS 
0000			; 
0000			; *****************  Requirements: 
0000			; 
0000			; It is set to test a fully populated MAP80 256k memory card. 
0000			; The program assumes you have NAS-SYS3. 
0000			; The program defaults assume that you have a MAP80 256k Ram card fully populated. 
0000			; That you are running the program in the WRAM area ( 4114 chip in Nascom 2 board). 
0000			; That the card is using the standard control port at 0xFE. 
0000			; 
0000			; *****************  Processing: 
0000			;  It has 2 phases 
0000			;  Phase 1 
0000			;      It sets all memory locations on all pages to 0x0 
0000			;  Phase 2 
0000			;      It tests each byte to be zero at the start 
0000			;      It does a "bit walk" to check for linked data lines 
0000			;      It writes 0xFF to check you can set all bits. 
0000			;      If the other tests have worked  
0000			;           ( Originally tested failed memory but there was an issue if ROM memory had certain values caused it to crash?) 
0000			;           It uses the Nascom NMI single step function 
0000			;           to check that opcodes can work by using LD A,(HL) 
0000			;               where HL points at a location with 055H 
0000			;      		   and checking it actually worked. 
0000			; 
0000			; at the end shows "press SP, C or Q" at the end of each cycle 
0000			;    space or c starts the process all over again 
0000			;    enter Q or any other character to return to NAS-SYS ( see "press SP, C or Q" above ) 
0000			; 
0000			; *******************  Results: 
0000			;  memory address with a letter A means 
0000			;     The memory location was not 0 when checked. 
0000			;         All memory locations are set to zero before the tests begin 
0000			;         Non zero here means is was changed by something since the start. 
0000			;         It could mean problems with the address lines, or the paging port FE. 
0000			;             or that that memory is on the Nascom card and enabling ram disable. 
0000			; memory address with a letter B means 
0000			;     The bit walk on that byte of memory failed. 
0000			; memory address with a letter C means 
0000			;     The program could not store 0xFF at that byte. 
0000			; memory address with a letter D means 
0000			;     The attempt to run opcode test was not successful 
0000			;          NOTE:- it is only run if the other tests have worked. 
0000			; 
0000			;  Changes  
0000			;  Version 2 - January 2021 
0000			;  1.changed where the address value was written to on the header line. 
0000			;    the routine was outputting a space into the extra space right of the header line 
0000			;    This could cause an issue with the keyboard routines if all the values past 0xBF9 were 0x00. 
0000			;    The rout routine caould at that point update the kmap table with the space. 
0000			;  2.Changed to check key routine to check for any input ( keyboard or uart ) 
0000			; 
0000			;  Version 3 - January 2021 
0000			;  1. changed start message to state switching x type pages 
0000			;            e.g. switching 8 32KU pages  ( 32k pages into upper 32k of memory ) 
0000			;  2. moved stack to end of code 
0000			;  3. optimised some of the code to save space 
0000			; 
0000			; Nas-Sys Equates 
0000			 
0000			PORT0:	EQU	0C00H	; copy of port 0 
0000			ARGN:	EQU	0C0BH	; number of arguments supplied  
0000			ARG1:	EQU	0C0CH	; Holds program address 
0000			ARG2:	EQU	0C0EH	; holds first parameter = start address 
0000			ARG3:	EQU	0C10H   ; holds second parameter = end address 
0000			ARG4:	EQU	0C12H	; holds third paramter = No of 32k pages 
0000			ARG5:   EQU 0C14H   ; holds forth paramter =  
0000			CURSOR:	EQU	0C29H   ; hold position of the cursor on the screen 
0000			NMI:	EQU	0C7DH	; address to hold NMI routine - starts with a JP  
0000			 
0000			 
0000			; these are the RST values - some require other bytes to follow them 
0000			; e.g. 
0000			; RST ROUT	; output a single character 
0000			;  
0000			 
0000			RIN:  	EQU	08H	; wait for a character 
0000			SCAL:	EQU	18H	; Subroutine call - follow by number of routine 
0000			PRS:	EQU	28H ; Output the following characters until a 0 is encountered 
0000			ROUT:	EQU	30H ; Output to output a single character 
0000			 
0000			;  values to be used with SCAL  
0000			;     e.g.  
0000			;        RST  SCAL 
0000			;	     DEFB TBCD3 
0000			 
0000			MRET:	EQU	5BH	; return control to NAS-SYS 
0000			KDB:	EQU	61H	; scan keyboard 
0000			ZIN:    EQU 62H ; scan for input 
0000			BLINK:	EQU	7BH 	; blink cursoe and wait for input  
0000			TBCD3:	EQU	66H	; output HL as ascii plus space 
0000			TBCD2:	EQU	67H	; output A as ascii + add to C 
0000			B2HEX:	EQU	68H	; output A as ascii 
0000			SPACE:	EQU	69H	; output a space 
0000			CRLF:	EQU	6AH	; output a cr and lf 
0000			 
0000			; controls for the screen 
0000			CS:	EQU	0CH	; Clear screen used with RST PRS 
0000			CR:	EQU	0DH	; Do character return 
0000			ESC:	EQU	1BH	; clear line and put cursor at start 
0000			; 
0000			; 
0000			; 
0000				ORG	0c80H	; had to use 0C80H as program needs all the working Ram :) 
0c80 c3 95 0c			JP	START 
0c83			 
0c83 00 00		STOREADDR:	DEFW	0H	; store address we got to as screen updated 
0c85			 
0c85 04			NO64KPAGES:	DEFB	04	; the number of 64k pages involved in the tests 
0c86			                        	; when doing 32k paging tests we double this number 
0c86							; for standard 256k card the max is 4 
0c86							; you can go higher with more cards 
0c86			 
0c86 01			PAGEINCR: DEFB  01		; The incremental value to switch to the next page 
0c87							 
0c87 00			PAGETYPE: DEFB	00		; the value to be loaded into OFE to set the first page 
0c88							; it will be changed to 080H for testing upper 32k pages 
0c88							; or 0C0H for testing lower 32k pages. 
0c88						 
0c88			 
0c88 55			TESTVALUE:	DEFB	055H	; what to load to the memory 
0c89 00			TESTCYCLE: 	DEFB	0	; Test cycle - either set memory to zero or do tests 
0c8a 00 00		SAVESTACK:	DEFW	0H	; save Stack pointer before doing NMI 
0c8c 00 00		SAVENMI:	DEFW	0H	; save area for old NMI address 
0c8e 00			ERRORS:		DEFB	0H	; how many errors have occurred 
0c8f 00			WAITONERROR:	DEFB	0H	; set to zero to wait after 10 errors 
0c90			 
0c90 00			SAVERESULT:	DEFB	0H	; save the returned byte 
0c91			 
0c91				; normally 8000 to 0000 to cover the top 32k 
0c91 00 80		STARTADDR:	DEFW	08000H	; start address for test of a page 
0c93 00 00		ENDADDR:	DEFW	00000H	; end address for test of a page 
0c95			 
0c95			 
0c95			START:	 
0c95 31 75 0f			LD SP,TSTSTACK		; use our own stack 
0c98			 
0c98 2a 29 0c			LD   HL,(CURSOR)	; save current cursor position 
0c9b e5				PUSH HL 
0c9c			 
0c9c 21 ca 0b			LD   HL,0BCAH	; set screen to heading line 
0c9f 22 29 0c			LD (CURSOR),HL	 
0ca2 ef				RST PRS		; clear current line 
0ca3 1b 00			DEFB ESC,0 
0ca5			 
0ca5 ef				RST PRS 
0ca6 ..				DEFM "MAP80 MEMTST V3" 
0cb5 00				DEFB 0 
0cb6			 
0cb6 e1				POP HL		; restore cursor position 
0cb7 22 29 0c			LD (CURSOR),HL	 
0cba			 
0cba af				XOR A 
0cbb 32 8f 0c			LD (WAITONERROR),A	; so we wait after 10 error lines 
0cbe				; ---- check if paramters supplied 
0cbe 3a 0b 0c			LD  A,(ARGN)	; load how many arguments  
0cc1 b7				OR  A 
0cc2 28 1e			JR  Z,NOPARMS	; no paramters given just E entered 
0cc4 fe 01			CP  1 
0cc6 28 1a			JR  Z,NOPARMS	; just the Execute address given 
0cc8 fe 02			CP  2 
0cca 28 10			JR  Z,TWO 
0ccc fe 03			CP  3 
0cce 28 06			JR  Z,THREE 
0cd0				; assume we have 4 or more parameters - will ignore the rest 
0cd0				; drop down to 4 parameters 
0cd0				; Load parameters into local memory  
0cd0				; so if called again same values will be used 
0cd0				 
0cd0 3a 12 0c		FOUR:	LD A,(ARG4)		; just the low bytes from this parameter 
0cd3				; allow 0 as a special case - means no paging  
0cd3			FOUROK: 
0cd3 32 85 0c			LD (NO64KPAGES),A	; store number of 64k pages to process 
0cd6			 
0cd6 2a 10 0c		THREE:	LD HL,(ARG3)	; new end address 
0cd9 22 93 0c			LD (ENDADDR),HL 
0cdc			 
0cdc 2a 0e 0c		TWO:	LD HL,(ARG2)	; new start address 
0cdf 22 91 0c			LD (STARTADDR),HL 
0ce2			 
0ce2			NOPARMS:	; paramters all loaded 
0ce2					; check the type of test being done. 
0ce2 3e 01			LD A,1	; set page increment value to 1 used for 32k pages 
0ce4 4f				LD C,A 
0ce5				; set up addresses 
0ce5 2a 93 0c			LD HL,(ENDADDR)     ; finish address 
0ce8 ed 5b 91 0c		LD DE,(STARTADDR)     ; start address 
0cec 2b				DEC HL		; get the real finish address in HL 
0ced			 
0ced			 
0ced			TESTTYPE:		; check if doing lower upper 32k or 64k 
0ced			 
0ced 7a				LD A,D 		; get the high byte of the START address 
0cee c6 80			ADD 80H		; adding 80H will set carry flag if greater than 80H 
0cf0 38 0a			JR C,TOP32K	; if carry set then start address is in top 32k 
0cf2						; else start address is in bottom 32k   
0cf2 7c				LD A,H	 	; get the high byte of the end address 
0cf3 c6 80			ADD 80H		; adding 7FH will set carry flag if greater than 80H 
0cf5 38 0a			JR C,FULL64K	; if carry set then end address is in top 32k so doing 64k paging 
0cf7			 
0cf7			LOW32K: 
0cf7 3e c0			LD A,0C0H	; value to output to use the lower 32k for paging  
0cf9 47				LD B,A 
0cfa 18 09			JR SETPAGETYPE 
0cfc 3e 80		TOP32K: LD A,080H	; value to output to use the upper 32k for paging 
0cfe 47				LD B,A 
0cff 18 04			JR SETPAGETYPE 
0d01			 
0d01			FULL64K:  
0d01 3e 00			LD A,00H	; value to output to test the first 64k page 
0d03 47				LD B,A 
0d04 03				INC BC		; increment value so page increment is now 2 
0d05			 
0d05			SETPAGETYPE: 
0d05 ed 43 86 0c		LD (PAGEINCR),BC	; save increment value and what type of test is being done  
0d09			 
0d09			 
0d09				 
0d09			; ------------------------- display details about the test. 
0d09			DISPLAYSTART: 
0d09			 
0d09 ed 5b 29 0c		LD  DE,(CURSOR)	; hold current cursor position 
0d0d 21 da 0b			LD	HL,0BDAH	; set screen to heading line 
0d10 22 29 0c			LD (CURSOR),HL 
0d13 cd 11 0f			CALL OUTRANGE   ; test range  
0d16 cd 25 0f			CALL DISPSIZE   ; test type 32k or 64k and paging ? 
0d19 ed 53 29 0c		LD (CURSOR),DE ; put cursor back onto main screen 
0d1d			 
0d1d			    ; move onto screen and repeat details 
0d1d cd 11 0f			CALL OUTRANGE 
0d20			 
0d20 cd e1 0d		    CALL GETPAGETYPE 
0d23			    ; Sets C to the page type (PAGETYPE)  
0d23			    ; Sets B to the number of pages to do ( NO64KPAGES )  
0d23			    ;  will be *2 if doing 32k pages (PAGETYPE != 0 ) 
0d23			    ; A == B and the Z flag is set if PAGETYPE == 0 ( 64k paging ) 
0d23			     
0d23 b7			    OR A 
0d24 28 1e			JR Z,NOPAGING	; zero means no paging  
0d26			 
0d26 ef				RST PRS 
0d27 ..				DEFM "switching " 
0d31 00				DEFB 0 
0d32			 
0d32 78				LD  A,B		; Number set earlier by GETPAGETYPE  
0d33 df				RST SCAL        ; print  count number 
0d34 68				DEFB B2HEX 
0d35 df				RST SCAL        ; print space 
0d36 69				DEFB SPACE 
0d37				 
0d37 cd 25 0f			CALL DISPSIZE   ; output type of test being done 
0d3a			 
0d3a ef				RST PRS 
0d3b ..				DEFM " pages" 
0d41 00				DEFB 0 
0d42 18 00			JR  WAITSTART 
0d44			 
0d44			NOPAGING: 
0d44			    ; nothing to do if not paging 
0d44			     
0d44			WAITSTART:	 
0d44			 
0d44			; new line before we start the test 
0d44 df			    RST SCAL 
0d45 6a			    DEFB CRLF 
0d46			 
0d46			; -------------- wait for key press before starting 
0d46			; removed so it goes straight in 
0d46			;	RST PRS 
0d46			;	DEFB CR 
0d46			;	DEFM "To start " 
0d46			;	DEFB 0 
0d46			;	CALL WAIT 
0d46			; 
0d46			; -------------------------- start running the tests 
0d46			 
0d46			LOOP:	; start by setting test type 
0d46				 
0d46 3e 01			LD	A,1		; 2 cycles ( zerioise and then test ) 
0d48				;   firstly to zeroize all pages 
0d48				;   second to do bit walk 
0d48				;             and opcode test 
0d48 32 89 0c			LD	(TESTCYCLE),A 
0d4b			 
0d4b			NXTCYCLE:	; move to next cycle 
0d4b			 
0d4b			PAGESTART:	; start here for new pages 
0d4b			 
0d4b cd e1 0d		    CALL GETPAGETYPE     
0d4e			    ; Sets C to the page type (PAGETYPE)  
0d4e			    ; Sets B to the number of pages to do ( NO64KPAGES )  
0d4e			    ;  will be *2 if doing 32k pages (PAGETYPE != 0 ) 
0d4e			    ; 
0d4e			 
0d4e			NXTPAGE: 
0d4e 78				LD A,B		; retrieve counter to check if paging  
0d4f b7				OR A		; should only be zero first time if not paging 
0d50 28 0a			JR Z,SKIPPAGING	; if the count was zero then no paging  
0d52 79				LD A,C          ; get page type - the value to set the page mode 
0d53 d3 fe			OUT (0FEH),A	; set memory 
0d55 3a 86 0c			LD A,(PAGEINCR) ; will only add 1 or 2 to the C register ready for next page          
0d58 81				ADD A,C 
0d59 4f				LD C,A		; save it again 
0d5a 18 01			JR SETADDRESS 
0d5c			SKIPPAGING: 
0d5c 04				INC B		; increment B from 0 to 1 to do 1 cycle 
0d5d			SETADDRESS: 
0d5d c5				PUSH BC		; save counter and next port value         
0d5e				; set up addresses 
0d5e 2a 93 0c			LD HL,(ENDADDR)     ; finish address 
0d61 ed 5b 91 0c		LD DE,(STARTADDR)     ; start address 
0d65			 
0d65				; decide which test is being done 
0d65 3a 89 0c			LD	A,(TESTCYCLE)	; check what test we are doing 
0d68 fe 02			CP	2 
0d6a ca 87 0d			JP	Z,BITWALK 
0d6d				; else number 1 is zero all memory 
0d6d			 
0d6d			ZERO: 
0d6d			;   set all memory addresses to value 0 
0d6d			 
0d6d cd 42 0e		 	CALL OUTZERO	 ; output start message  
0d70			 
0d70 af				XOR A		 ; clear carry flag 
0d71 ed 52			SBC HL,DE        ; calculate count 
0d73			 
0d73 44				LD B,H           ; and in BC for the LDIR code 
0d74 4d				LD C,L 
0d75 2a 91 0c			LD HL,(STARTADDR); start address 
0d78 54				LD D,H           ; and in DE 
0d79 5d				LD E,L 
0d7a			 
0d7a				; LDIR has an issue if any ROM in the way 
0d7a				;  so doing own loop 
0d7a				;  We need to implicity set each address to zero 
0d7a			        ; the LDI instruction moves (DE) to (HL) but they are the same address. 
0d7a			ZBYTE: 
0d7a				; removed these as sloowwww down the zeroise process 
0d7a				; CALL OUTADDHEADER	 ; put address on screen 
0d7a				; CALL CHECKKEY	; check for key press 
0d7a 36 00			LD (HL),0       ; copy 0 to location  
0d7c ed a0			LDI             ; next location and dec BC 
0d7e			 
0d7e ea 7a 0d			JP PE,ZBYTE       ; loop till end reached 
0d81			 
0d81 cd d4 0e			CALL CHECKKEY	; check for key press after each zeroisation 
0d84			 
0d84 c3 cb 0d			JP	ENDPAGE 
0d87			 
0d87			 
0d87			BITWALK:	; test page to see if is starts at zero 
0d87			                ; then do bit walk 
0d87			 
0d87 cd 39 0e		 	CALL OUTTEST	    ; output start message  
0d8a af				XOR A		 ; ensure flags are reset 
0d8b ed 52			SBC HL,DE        ; calculate count 
0d8d 44				LD B,H           ; and in BC for the LDIR code 
0d8e 4d				LD C,L 
0d8f 2a 91 0c			LD HL,(STARTADDR); reload start address 
0d92			 
0d92			;--------- loop through all addresses 
0d92			ZCHECK: 
0d92 16 00			LD D,0		 ; clear error flag 
0d94 cd 9b 0e			CALL OUTADDHEADER	 ; put address on screen 
0d97 af				XOR A            ;  
0d98 be				CP (HL)          ; memory should be zero from original zeroising 
0d99 3e 41			LD A,"A"         ; load error letter in case it failed 
0d9b c4 b7 0e			CALL NZ,ERR      ; Fault A if non zero from cp statement 
0d9e			 
0d9e			; -------------------    walking bit test 
0d9e 3e 01			LD A,1           ; intial bit position  
0da0 77			WALK:	LD (HL),A        ; put into memory 
0da1 be				CP (HL)          ; did it get there 
0da2 f5				PUSH AF          ; save bit pattern 
0da3 3e 42			LD A,"B"         ; load error code in case 
0da5 c4 b7 0e			CALL NZ,ERR      ; report Fault B if walk failed 
0da8 f1				POP AF           ; get bit pattern and flags from stack 
0da9 20 03			JR NZ,LOADFF     ; if it failed jump to next test 
0dab 17				RLA              ; move bit to next position 
0dac 30 f2			JR NC,WALK       ; repeat until the bit reaches the carry flag 
0dae			 
0dae			;-------------------- Load FF test   
0dae			LOADFF: 
0dae 3e ff		 	LD A,0FFH      ; Store FF  
0db0 77				LD (HL),A        ; store FF into test location 
0db1 be				CP (HL)          ; did it get there 
0db2 3e 43			LD A,"C"         ; load error letter in case 
0db4 c4 b7 0e			CALL NZ,ERR      ; Fault C as FF not loaded 
0db7			 
0db7				; test the running of an opcode in the memory area 
0db7			 
0db7 7a				LD A,D           ; get error flag set in ERR routine 
0db8 b7				OR A             ; Non-zero if error occured  
0db9 cc ee 0d			CALL Z,OPCODETEST	; if no other errors test if opcode fetch works 
0dbc				                    ; opcode test separate routine so we can use DJNZ to loop 
0dbc			 
0dbc 7a				LD A,D           ; get error flag set in ERR routine 
0dbd b7				OR A             ; Non-zero if error occured  
0dbe c4 c2 0e			CALL NZ,ERRORLINE   ; output a newline - or wait if too many errors 
0dc1			 
0dc1			;--------------------- end of check a single byte 
0dc1 cd d4 0e			CALL CHECKKEY	; check for key press 
0dc4						 ; unless we reset DL it does  
0dc4			                         ; (HL) -> (DE) and DE is ROM - 0x00xx or 0x01xx 
0dc4 54				LD	D,H	 ; reset DE for the LDI 
0dc5 5d				LD	E,L 
0dc6 ed a0			LDI              ; step onto next location 
0dc8 ea 92 0d			JP PE,ZCHECK       ; loop till end reached 
0dcb			 
0dcb			;----------- end of walk test  
0dcb			 
0dcb			; drop through to ENDPAGE when done 
0dcb			 
0dcb			ENDPAGE:	; come here when we have finished test for one page 
0dcb			 
0dcb c1				POP BC		 ; get counter and port value from stack 
0dcc 10 80			DJNZ NXTPAGE	 ; decement B and jump if not zero 
0dce			 
0dce				;RST PRS 
0dce				;DEFM "End Test" 
0dce				;DEFB CR,0 
0dce				;CALL WAIT	 ; wait between test type 
0dce			 
0dce			 
0dce			; check if we have done all tests 
0dce 3a 89 0c			LD	A,(TESTCYCLE)	; load current test number 
0dd1 3c				INC	A 
0dd2 57				LD	D,A			; store for start check 
0dd3 32 89 0c			LD	(TESTCYCLE),A		; store away again 
0dd6 fe 03			CP	3 
0dd8 c2 4b 0d			JP	NZ,NXTCYCLE 
0ddb			 
0ddb			 
0ddb cd db 0e			CALL WAIT	 ; wait after memtest 
0dde			 
0dde			 
0dde c3 46 0d			JP LOOP          ; go back to start 
0de1			 
0de1			;--------------------------------------- 
0de1			; -------------------- end of main loop 
0de1			;--------------------------------------- 
0de1			 
0de1			;------------------------- get page type 
0de1			; V3 added this routine as used more than once 
0de1			GETPAGETYPE: 
0de1			    ; Sets C to the page type (PAGETYPE)  
0de1			    ; Sets B to the number of pages to do ( NO64KPAGES )  
0de1			    ;  will be *2 if doing 32k pages (PAGETYPE != 0 ) 
0de1			    ; A == B and the Z flag is set if PAGETYPE == 0 ( 64k paging ) 
0de1			     
0de1 3a 87 0c		    LD  A,(PAGETYPE)	; load the value to set the first page 
0de4 4f				LD  C,A       	; value that starts with page 0 
0de5 b7				OR  A		; if zero then doing 64k pages 
0de6 3a 85 0c			LD  A, (NO64KPAGES)	; get number of pages to check 
0de9				; next test checking previous or 
0de9 28 01			JR  Z,GETPAGETYPE64K		; flag set by previous OR A  
0deb						; doing 32k pages so need to double the number of tests done 
0deb 17				RLA			; shift left == multiply by 2 ( carry bit reset by OR A ) 
0dec							; needed so we can do 2 32k tests on each 64k page	 
0dec			GETPAGETYPE64K: 
0dec 47				LD  B,A			; store away for later count down 
0ded c9			    RET 
0dee			 
0dee			 
0dee			;---------------------- do opcode test 
0dee			;                       as a subroutine as main loop was too big for JR commands 
0dee			OPCODETEST: 
0dee			 
0dee			LOADOPCODE: 
0dee e5				PUSH HL 
0def 21 f2 0d			LD HL,DUMMY 
0df2			DUMMY: 
0df2 7e				LD A,(HL)	 ; dummy to get code value	 
0df3 e1				POP HL 
0df4 77				LD (HL),A	; LD A,(HL) 
0df5			 
0df5 e5				PUSH HL		; save current registers 
0df6 d5			 	PUSH DE 
0df7 c5				PUSH BC 
0df8				; save current stack so we can reset it later 
0df8 ed 73 8a 0c		LD (SAVESTACK),SP 
0dfc			  
0dfc				; set stack pointer for the test 
0dfc				; LD      SP,TSTSTACK 
0dfc				; assuming we don't need to and can use our own stack 
0dfc				; put user pc on top of stack 
0dfc e5				PUSH	HL	; add HL to top of stack  
0dfd			 
0dfd				; do step commands 
0dfd				; set so the NMI address is our routine 
0dfd				;  NMI address starts with a JP  
0dfd 2a 7e 0c			LD HL,(NMI+1) 
0e00 22 8c 0c			LD (SAVENMI),HL 
0e03 21 16 0e			LD HL,TRAP 
0e06 22 7e 0c			LD (NMI+1),HL 
0e09 21 88 0c			LD HL,TESTVALUE	; point HL at the test value 
0e0c 3e aa			LD A,0AAH	; set A and then see if it changes value 
0e0e			 
0e0e				; set bit 3 of p0, to activate nmi 
0e0e f5				PUSH AF 
0e0f 3e 08			LD   A,8 
0e11 d3 00			OUT  (0),A 
0e13 f1				POP  AF 
0e14			        ; execute one step of program 
0e14 ed 45			RETN	; not sure why RETN? 
0e16			 
0e16			; come here after nmi or bpt 
0e16			TRAP: 
0e16				; reset NMI address 
0e16 2a 8c 0c			LD HL,(SAVENMI) 
0e19 22 7e 0c			LD (NMI+1),HL 
0e1c 32 90 0c			LD	(SAVERESULT),A	; save result 
0e1f				; reset nmi bit in p0 
0e1f 3a 00 0c			LD   A,(PORT0) 
0e22 d3 00			OUT  (0),A 
0e24			 
0e24				; set my stack pointer 
0e24 ed 7b 8a 0c		LD      SP,(SAVESTACK) 
0e28			 
0e28 c1				POP	BC	; restore registers 
0e29 d1				POP	DE 
0e2a e1				POP	HL 
0e2b			 
0e2b				; output the A register 
0e2b 3a 90 0c			LD	A,(SAVERESULT) 
0e2e 5f				LD	E,A 
0e2f			 
0e2f			; DEBUG - output value returned 
0e2f			;	RST     SCAL 
0e2f			;	DEFB	B2HEX 
0e2f			;	RST SCAL 
0e2f			;	DEFB SPACE       ; and space 
0e2f			 
0e2f 3a 88 0c			LD	A,(TESTVALUE)	; check if it is the same as LD A command  
0e32 bb				CP	E 
0e33 3e 44			LD	A,"D"	 ; set error code to D 
0e35 c4 b7 0e			CALL NZ,ERR      ; Fault D if the LD A,TESTVALUE failed 
0e38			 
0e38 c9				RET 
0e39			 
0e39			; -----------------   Output TEST Start Address and page number 
0e39			OUTTEST:  
0e39			 
0e39 ef				RST PRS 
0e3a ..				DEFM "TEST:" 
0e3f 00				DEFB 0 
0e40 18 07		    JR OUTADDR      ; jump to output address 
0e42			 
0e42			; -----------------   Output zeroize message  
0e42			;                     Start Address in DE  
0e42			;                     BC - port value and count 
0e42			OUTZERO:  
0e42 ef				RST PRS 
0e43 ..				DEFM "Zero:"  
0e48 00				DEFB 0 
0e49				 
0e49			; drop through to output address 
0e49			; ---------------- output the current address  
0e49			OUTADDR:  
0e49			    ; save registers we will use 
0e49 c5				PUSH BC		; BC has port value and count 
0e4a e5				PUSH HL		; End Address 
0e4b			 
0e4b				; extra saves so we call pull for message 
0e4b c5				PUSH BC		; BC has port value and count 
0e4c e5				PUSH HL		; End Address 
0e4d d5				PUSH DE		; DE start address 
0e4e			 
0e4e e1			  	POP HL		 ; gets start address 
0e4f df				RST SCAL         ; print  address 
0e50 66				DEFB TBCD3 
0e51			 
0e51 ef				RST PRS 
0e52 ..				DEFM "- "  
0e54 00				DEFB 0 
0e55			 
0e55			 
0e55 e1			  	POP HL		 ; gets end address 
0e56 2b				DEC HL		 ; dec to show actual end address 
0e57 df				RST SCAL         ; print  address 
0e58			 
0e58 66				DEFB TBCD3 
0e59 e1			  	POP HL		 ; gets port value and count 
0e5a cd 62 0e			CALL OUTPAGE	; output page being tested 
0e5d			 
0e5d df				RST SCAL 
0e5e 6a				DEFB CRLF	 ; do a new line 
0e5f			 
0e5f			    ; reset registers  
0e5f e1			    POP HL 
0e60 c1			    POP BC 
0e61			 
0e61 c9				RET 
0e62			 
0e62			;------------- output page number  
0e62			; in header area and on current line 
0e62			OUTPAGE: ; call here to output page details in the header 
0e62				; at the heading line 
0e62 e5				PUSH HL		; save address to stack 
0e63 2a 29 0c			LD HL,(CURSOR) 
0e66 e3				EX (SP),HL	; exchange cursor value with address in stack 
0e67 e5				PUSH HL		; re save address to stack 
0e68 21 ed 0b			LD HL,0BEDH	; set screen to heading line 
0e6b 22 29 0c			LD (CURSOR),HL	 
0e6e e1				POP HL 		; return address 
0e6f cd 77 0e			CALL OUTPAGE1	; output details 
0e72 e3				EX (SP),HL	; get cursor and save HL 
0e73 22 29 0c			LD (CURSOR),HL 
0e76 e1				POP HL		; get address 
0e77			 
0e77			OUTPAGE1:	; call here to output page where the cursor is 
0e77 3a 85 0c			LD A,(NO64KPAGES) 
0e7a b7				OR A 
0e7b c8				RET Z	; return if doing non paging processing 
0e7c ef				RST PRS 
0e7d ..				DEFM "pg:"      ; V2 shorten the page text to accommodate moving the address value 
0e80 00				DEFB 0 
0e81 7d				LD A,L		; bring down just the lower parts of L 
0e82						; which is the Port value to set page 
0e82 3d				DEC A		; actually the next page so reduce by 1 
0e83						; ( Port value incremented after setting port ) 
0e83 e6 3f		    	AND 3FH		; remove the 2 control bits 
0e85 cb 3f			SRL A		; shift to right by 1 and sets carry flag 
0e87 f5				PUSH	AF	; save the carry flag 
0e88 df				RST SCAL    ; print  port value 
0e89 68				DEFB B2HEX 
0e8a				;RST SCAL         ; output space 
0e8a				;DEFB SPACE 
0e8a 3a 87 0c			LD  A,(PAGETYPE) 	; check type of test 
0e8d b7				OR A		; or wih self will set z flag if zeros 
0e8e 28 09			JR Z,PAGE64	; 64k tests 
0e90 f1				POP AF		; Get Carry flag 
0e91 3e 55			LD A,"U" 
0e93 38 02			JR C,UPPER	; if carry set then upper 32k page 
0e95 3e 4c			LD A,"L" 
0e97			UPPER: 
0e97 f7			    	RST ROUT	; output the single character 
0e98 c9				RET 
0e99			PAGE64:			; no further action 
0e99 f1				POP AF 
0e9a c9				RET 
0e9b			 
0e9b			; -----------------   Output Address in HL on header and then reset cursor  
0e9b			OUTADDHEADER:  
0e9b c5				PUSH BC          ; save registers BC as TBCD3 adds to C 
0e9c d5				PUSH DE          ; No need to save A register 
0e9d e5				PUSH HL 
0e9e ed 5b 29 0c		LD DE,(CURSOR)   ; get current cursor on screen 
0ea2 21 f5 0b			LD HL,0BF5H	; set screen to heading line 
0ea5				             ; V2 moved placment of the address value left by 1 
0ea5 22 29 0c			LD (CURSOR),HL	 
0ea8 e1				POP HL 
0ea9 e5				PUSH HL 
0eaa df				RST SCAL         ; print current address 
0eab 66				DEFB TBCD3 
0eac 22 83 0c			LD (STOREADDR),HL    ; save address we may bomb 
0eaf ed 53 29 0c		LD (CURSOR),DE   ; replace old cursor on screen 
0eb3 e1				POP HL 
0eb4 d1				POP DE 
0eb5 c1				POP BC           ; get count back 
0eb6 c9				RET              ; return 
0eb7			 
0eb7			 
0eb7			; -----------------   Error routine 
0eb7			ERR:  
0eb7 f5				PUSH AF          ; save Flags 
0eb8 c5				PUSH BC          ; save count 
0eb9 f7				RST ROUT         ; output error letter 
0eba df				RST SCAL 
0ebb 69				DEFB SPACE       ; and space 
0ebc df				RST SCAL         ; output address 
0ebd 66				DEFB TBCD3 
0ebe 14				INC D            ; tell calling code Err called 
0ebf c1				POP BC           ; retrieve count 
0ec0 f1				POP AF           ; retrieve flags 
0ec1 c9				RET              ; return 
0ec2			 
0ec2			; ------------------ routine to output a newline on screen 
0ec2			;                    if an error has occurred 
0ec2			;                    and wait if 10 errors have occurred 
0ec2			;                    ( wait may not wait if WAITONERROR is not Zero ) 
0ec2			ERRORLINE: 
0ec2 df				RST SCAL 
0ec3 6a				DEFB CRLF 
0ec4 3a 8e 0c			LD A,(ERRORS) 
0ec7 3c				INC A 
0ec8 fe 0a			CP 0AH 
0eca 20 04			JR NZ,ERRJUSTCR 
0ecc cd db 0e			CALL WAIT 
0ecf af				XOR A	; reset error count  
0ed0			ERRJUSTCR:  
0ed0 32 8e 0c			LD (ERRORS),A	; store new error count 
0ed3			 
0ed3 c9				RET 
0ed4			 
0ed4			 
0ed4			; ---------------------------- check for key press 
0ed4			CHECKKEY:	; check for key press 
0ed4			            ; removed register saves as not needed 
0ed4 df				RST  SCAL 
0ed5 62				DEFB ZIN	; scan for input V2 - changed to use any input to wait 
0ed6 d0				RET   NC 
0ed7 af				XOR  A 
0ed8 32 8f 0c			LD (WAITONERROR),A	; reset wait on error 
0edb			 
0edb			; -----------------   wait until key pressed 
0edb			 
0edb			WAIT: 
0edb d5			 	PUSH DE          ; DE used for cursor position 
0edc ed 5b 29 0c		LD DE,(CURSOR)   ; get current cursor on screen 
0ee0 3a 8f 0c			LD A,(WAITONERROR) 
0ee3 b7				OR A 
0ee4 20 1e			JR NZ,CONT1 
0ee6 ef				RST PRS 
0ee7 ..				DEFM "press SP, C or Q" 
0ef7 00				DEFB 0 
0ef8			 
0ef8 cf				RST RIN          ; wait for character returned in A 
0ef9 fe 20			CP " "		     ; if space carry on  
0efb 28 07			JR Z,CONT1     ; else jump to warn start nassys 3 
0efd fe 43			CP "C"		; C will continue without stopping 
0eff 20 0c			JR NZ,NASSYS	; exit if anything else  
0f01			 
0f01 32 8f 0c			LD (WAITONERROR),A	; set it so it does not wait 
0f04			 
0f04			CONT1: 
0f04 ed 53 29 0c		LD (CURSOR),DE   ; replace old cursor on screen 
0f08 ef				RST PRS		; clear current line 
0f09 1b 00			DEFB ESC,0 
0f0b			 
0f0b d1				POP DE           ; get old DE 
0f0c c9				RET              ; return 
0f0d			NASSYS: 
0f0d df				RST SCAL 
0f0e 6a				DEFB CRLF	 ; do a new line 
0f0f df				RST SCAL 	 ; return to NasSys3 
0f10 5b				DEFB MRET 
0f11			 
0f11			 
0f11			;---------------------- output the range of the memory test 
0f11			;                        
0f11			OUTRANGE: 
0f11 ef				RST PRS 
0f12 ..				DEFM "S:" 
0f14 00				DEFB 0 
0f15			 
0f15 2a 91 0c			LD HL,(STARTADDR)     ; start address 
0f18 df				RST SCAL         ; print address 
0f19 66				DEFB TBCD3 
0f1a			 
0f1a ef				RST PRS 
0f1b ..				DEFM "E:" 
0f1d 00				DEFB 0 
0f1e 2a 93 0c			LD HL,(ENDADDR)     ; finish address 
0f21 2b				DEC HL 
0f22 df				RST SCAL         ; print address 
0f23 66				DEFB TBCD3 
0f24 c9			    RET  
0f25			     
0f25			;-------------------- V3 - output the type of test  
0f25			DISPSIZE: 
0f25			    ; Sets C to the page type (PAGETYPE)  
0f25			    ; Sets B to the number of pages to do ( NO64KPAGES )  
0f25			    ;  will be *2 if doing 32k pages (PAGETYPE != 0 ) 
0f25			    ;  A == B and the Z flag is set if PAGETYPE == 0 ( 64k paging ) 
0f25 cd e1 0d		    CALL GETPAGETYPE 
0f28			     
0f28			    ; LD  A,B     ; retrieve no64kpages - already in A 
0f28			 
0f28 b7				OR  A 
0f29 28 19			JR  Z,DISPEND		; if zero then no paging 
0f2b 79				LD A,C          ; load page type 
0f2c b7				OR A		; check for Zero by using OR 
0f2d 28 10			JR Z,REP64K ; if (PAGETYPE) is zero then doing 64k pages 
0f2f						; doing 32k pages 
0f2f ef				RST PRS 
0f30 ..				DEFM "32K" 
0f33 00				DEFB 0 
0f34 79				LD A,C          ; load page type again 
0f35 fe 80			CP 80H 
0f37 3e 55			LD A,"U" 
0f39 28 02			JR Z,DISPUL 
0f3b 3e 4c			LD A,"L" 
0f3d			DISPUL: 
0f3d f7				RST ROUT	; output the single character 
0f3e c9				RET         ; return as now finished 
0f3f			REP64K: 
0f3f ef				RST PRS 
0f40 ..				DEFM "64K" 
0f43 00				DEFB 0 
0f44			DISPEND: 
0f44 c9				RET 
0f45			 
0f45			; V3 moved stack to end of code 
0f45			;  our own stack to use - also used for opcode call 
0f45			; used values so I could check and see how much we used  
0f45			; after run seemed to only get down to 27 leaving 28 (8 bytes ) free 
0f45			;  so commented out the other spaces 
0f45			STACKSPACE: 
0f45			;		DEFB 	3FH, 3EH, 3DH, 3CH, 3BH, 3AH, 39H, 38H 
0f45			;		DEFB 	37H, 36H, 35H, 34H, 33H, 32H, 31H, 30H 
0f45			 
0f45 2f 2e 2d 2c 2b 2a 29 28			DEFB 	2FH, 2EH, 2DH, 2CH, 2BH, 2AH, 29H, 28H 
0f4d 27 26 25 24 23 22 21 20			DEFB 	27H, 26H, 25H, 24H, 23H, 22H, 21H, 20H 
0f55 1f 1e 1d 1c 1b 1a 19 18			DEFB 	1FH, 1EH, 1DH, 1CH, 1BH, 1AH, 19H, 18H 
0f5d 17 16 15 14 13 12 11 10			DEFB 	17H, 16H, 15H, 14H, 13H, 12H, 11H, 10H 
0f65 0f 0e 0d 0c 0b 0a 09 08			DEFB 	0FH, 0EH, 0DH, 0CH, 0BH, 0AH, 09H, 08H 
0f6d 07 06 05 04 03 02 01 00			DEFB 	07H, 06H, 05H, 04H, 03H, 02H, 01H, 00H 
0f75			 
0f75			TSTSTACK:	EQU $		; the program stack starts here 
0f75			     
0f75			 
0f75			 
0f75			;End of code 
0f75			 
0f75			 
# End of file m80memtp.asm
0f75
